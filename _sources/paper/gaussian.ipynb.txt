{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Gaussian Distribution Example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow_probability as tfp\n",
    "\n",
    "tfd = tfp.distributions\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import seaborn as sns\n",
    "import numpy as np\n",
    "import scipy\n",
    "import tqdm\n",
    "import maxent\n",
    "import os\n",
    "\n",
    "tf.random.set_seed(0)\n",
    "np.random.seed(0)\n",
    "os.environ[\"CUDA_VISIBLE_DEVICES\"] = \"-1\"\n",
    "sns.set_context(\"paper\")\n",
    "sns.set_style(\n",
    "    \"whitegrid\",\n",
    "    {\n",
    "        \"xtick.bottom\": True,\n",
    "        \"ytick.left\": True,\n",
    "        \"xtick.color\": \"#333333\",\n",
    "        \"ytick.color\": \"#333333\",\n",
    "    },\n",
    ")\n",
    "# plt.rcParams[\"font.family\"] = \"serif\"\n",
    "plt.rcParams[\"mathtext.fontset\"] = \"dejavuserif\"\n",
    "colors = [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\"]\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Set-up Prior Distribution"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = np.array([1.0, 1.0])\n",
    "i = tf.keras.Input((1,))\n",
    "l = maxent.TrainableInputLayer(x)(i)\n",
    "d = tfp.layers.DistributionLambda(\n",
    "    lambda x: tfd.Normal(loc=x[..., 0], scale=tf.math.exp(x[..., 1]))\n",
    ")(l)\n",
    "model = maxent.ParameterJoint([lambda x: x], inputs=i, outputs=[d])\n",
    "model.compile(tf.keras.optimizers.Adam(0.1))\n",
    "model(tf.constant([1.0]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simulator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def simulate(x):\n",
    "    y = np.random.normal(loc=x, scale=0.1)\n",
    "    return y\n",
    "\n",
    "\n",
    "plt.figure()\n",
    "unbiased_params = model.sample(100000)\n",
    "y = simulate(*unbiased_params)\n",
    "y = np.squeeze(y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "pdf = scipy.stats.gaussian_kde(y)\n",
    "x = np.linspace(-10, 10, 100)\n",
    "plt.plot(x, pdf.pdf(x), color=colors[0], linewidth=2)\n",
    "plt.axvline(np.mean(y), color=colors[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Maximum Entropy Method"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = maxent.Restraint(lambda x: x, 4, maxent.EmptyPrior())\n",
    "\n",
    "me_model = maxent.MaxentModel([r])\n",
    "me_model.compile(tf.keras.optimizers.Adam(0.01), \"mean_squared_error\")\n",
    "result = me_model.fit(y, epochs=4, batch_size=128)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.axvline(x=4, color=colors[0])\n",
    "wpdf = scipy.stats.gaussian_kde(\n",
    "    np.squeeze(y), weights=np.squeeze(me_model.traj_weights)\n",
    ")\n",
    "x = np.linspace(-10, 10, 100)\n",
    "plt.plot(x, wpdf.pdf(x), color=colors[0], linewidth=2)\n",
    "\n",
    "\n",
    "plt.plot(x, pdf.pdf(x), color=colors[1], linewidth=2)\n",
    "plt.axvline(np.mean(np.squeeze(y)), color=colors[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Variational MaxEnt\n",
    "\n",
    "Try to fit to more extreme value - 10"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "r = maxent.Restraint(lambda x: x, 10, maxent.EmptyPrior())\n",
    "hme_model = maxent.HyperMaxentModel([r], model, simulate)\n",
    "hme_model.compile(tf.keras.optimizers.SGD(0.005), \"mean_squared_error\")\n",
    "result = hme_model.fit(epochs=4, sample_batch_size=len(y) // 4, verbose=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "w2pdf = scipy.stats.gaussian_kde(\n",
    "    np.squeeze(hme_model.trajs), weights=np.squeeze(hme_model.traj_weights)\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(3, 2), dpi=300)\n",
    "x = np.linspace(-10, 25, 100)\n",
    "plt.plot(\n",
    "    x, w2pdf.pdf(x), color=colors[2], linewidth=2, label=\"Variational MaxEnt Posterior\"\n",
    ")\n",
    "plt.axvline(x=10, color=colors[2])\n",
    "\n",
    "plt.plot(x, pdf.pdf(x), color=colors[1], linewidth=2, label=\"Prior\")\n",
    "plt.axvline(np.mean(np.squeeze(y)), color=colors[1])\n",
    "\n",
    "plt.plot(x, wpdf.pdf(x), color=colors[0], linewidth=2, label=\"MaxEnt Posterior\")\n",
    "plt.axvline(x=4, color=colors[0])\n",
    "plt.ylim(0, 0.30)\n",
    "plt.xlabel(r\"$r$\")\n",
    "plt.ylabel(r\"$P(r)$\")\n",
    "plt.title(\"a) MaxEnt\")\n",
    "plt.legend()\n",
    "plt.savefig(\"maxent.svg\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Bayesian Inference Setting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# https://pubmed.ncbi.nlm.nih.gov/26723635/\n",
    "plt.figure(figsize=(3, 2), dpi=300)\n",
    "x = np.linspace(-10, 25, 1000)\n",
    "cmap = plt.get_cmap(\"magma\")\n",
    "prior_theta = 10 ** np.linspace(-1, 4, 10)\n",
    "bpdf = np.exp(-((y - 10) ** 2) / (2 * prior_theta[:, np.newaxis]))\n",
    "bpdf /= np.sum(bpdf, axis=1)[:, np.newaxis]\n",
    "for i, p in enumerate(prior_theta):\n",
    "    ppdf = scipy.stats.gaussian_kde(np.squeeze(y), weights=bpdf[i])\n",
    "    plt.plot(\n",
    "        x,\n",
    "        ppdf.pdf(x),\n",
    "        color=cmap(i / len(prior_theta)),\n",
    "        label=f\"$\\\\theta/\\\\sigma$ = {p:.2f}\",\n",
    "    )\n",
    "plt.legend(fontsize=6)\n",
    "plt.xlim(-10, 15)\n",
    "plt.xlabel(r\"$r$\")\n",
    "plt.ylabel(r\"$P(r)$\")\n",
    "plt.title(\"b) Bayesian\")\n",
    "plt.savefig(\"bayes.svg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Effects of Observable"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "bayesian_results = []\n",
    "# scipy.stats.wasserstein_distance(y, y, u_weights=np.ones_like(y) / len(y), v_weights=bpdf[i])])\n",
    "x2 = np.linspace(-20, 20, 10000)\n",
    "for i in range(len(prior_theta)):\n",
    "    ppdf = scipy.stats.gaussian_kde(np.squeeze(y), weights=bpdf[i])\n",
    "    bayesian_results.append(\n",
    "        [\n",
    "            np.sum(ppdf.pdf(x) * x * (x[1] - x[0])),\n",
    "            -np.nansum((x[1] - x[0]) * ppdf.pdf(x) * np.log(ppdf.pdf(x))),\n",
    "        ]\n",
    "    )\n",
    "    print(i, bayesian_results[-1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "me_results = []\n",
    "for i in range(-5, 10):\n",
    "    r = maxent.Restraint(lambda x: x, i, maxent.EmptyPrior())\n",
    "    m = maxent.MaxentModel([r])\n",
    "    m.compile(tf.keras.optimizers.Adam(0.001), \"mean_squared_error\")\n",
    "    m.fit(y, epochs=4, batch_size=256, verbose=0)\n",
    "    # d = scipy.stats.wasserstein_distance(y, y, u_weights=m.traj_weights)\n",
    "    ppdf = scipy.stats.gaussian_kde(y, weights=m.traj_weights)\n",
    "    d = -np.nansum((x[1] - x[0]) * ppdf.pdf(x) * np.log(ppdf.pdf(x)))\n",
    "    me_results.append([i, d])\n",
    "    print(np.sum(y * m.traj_weights), d)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "plt.figure(figsize=(3, 2), dpi=300)\n",
    "me_result = np.array(me_results)\n",
    "bayesian_results = np.array(bayesian_results)\n",
    "plt.plot(me_result[:, 0], me_result[:, 1], label=\"MaxEnt\", color=colors[0])\n",
    "plt.plot(\n",
    "    bayesian_results[:, 0],\n",
    "    bayesian_results[:, 1],\n",
    "    linestyle=\"--\",\n",
    "    label=\"Bayesian Inference\",\n",
    "    color=colors[1],\n",
    ")\n",
    "plt.ylabel(\"Posterior Entropy\")\n",
    "plt.xlabel(\"$E[r]$\")\n",
    "plt.legend()\n",
    "plt.title(\"c) Posterior Entropy\")\n",
    "plt.savefig(\"post.svg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "bayesian_results[:]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
